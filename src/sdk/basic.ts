/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  basicCreateContact,
  CreateContactAcceptEnum,
} from "../funcs/basicCreateContact.js";
import {
  basicCreateDeal,
  CreateDealAcceptEnum,
} from "../funcs/basicCreateDeal.js";
import {
  basicGetCompany,
  GetCompanyAcceptEnum,
} from "../funcs/basicGetCompany.js";
import {
  basicGetContact,
  GetContactAcceptEnum,
} from "../funcs/basicGetContact.js";
import { basicGetDeal, GetDealAcceptEnum } from "../funcs/basicGetDeal.js";
import {
  basicGetProperties,
  GetPropertiesAcceptEnum,
} from "../funcs/basicGetProperties.js";
import {
  basicUpdateCompany,
  UpdateCompanyAcceptEnum,
} from "../funcs/basicUpdateCompany.js";
import {
  basicUpdateContact,
  UpdateContactAcceptEnum,
} from "../funcs/basicUpdateContact.js";
import {
  basicUpdateDeal,
  UpdateDealAcceptEnum,
} from "../funcs/basicUpdateDeal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetPropertiesAcceptEnum } from "../funcs/basicGetProperties.js";

export { GetCompanyAcceptEnum } from "../funcs/basicGetCompany.js";

export { UpdateCompanyAcceptEnum } from "../funcs/basicUpdateCompany.js";

export { GetContactAcceptEnum } from "../funcs/basicGetContact.js";

export { UpdateContactAcceptEnum } from "../funcs/basicUpdateContact.js";

export { CreateContactAcceptEnum } from "../funcs/basicCreateContact.js";

export { GetDealAcceptEnum } from "../funcs/basicGetDeal.js";

export { UpdateDealAcceptEnum } from "../funcs/basicUpdateDeal.js";

export { CreateDealAcceptEnum } from "../funcs/basicCreateDeal.js";

export class Basic extends ClientSDK {
  /**
   * Get the list of all groups that are available on any hubspot object.
   *
   * @remarks
   * Get the list of all properties that are available on any hubspot object.
   */
  async getProperties(
    request: operations.GetPropertiesRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetPropertiesAcceptEnum;
    },
  ): Promise<operations.GetPropertiesResponse> {
    return unwrapAsync(basicGetProperties(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a company
   *
   * @remarks
   * Retrieve a company by its ID (`companyId`) or by a unique property (`idProperty`). You can specify what is returned using the `properties` query parameter.
   */
  async getCompany(
    request: operations.GetCompanyRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetCompanyAcceptEnum },
  ): Promise<operations.GetCompanyResponse> {
    return unwrapAsync(basicGetCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   *
   * @remarks
   * Update a company by ID (`companyId`) or unique property value (`idProperty`). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.
   */
  async updateCompany(
    request: operations.UpdateCompanyRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateCompanyAcceptEnum;
    },
  ): Promise<operations.UpdateCompanyResponse> {
    return unwrapAsync(basicUpdateCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a contact
   *
   * @remarks
   * Retrieve a contact by its ID (`contactId`) or by a unique property (`idProperty`). You can specify what is returned using the `properties` query parameter.
   */
  async getContact(
    request: operations.GetContactRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetContactAcceptEnum },
  ): Promise<operations.GetContactResponse> {
    return unwrapAsync(basicGetContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   *
   * @remarks
   * Update a contact by ID (`contactId`) or unique property value (`idProperty`). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.
   */
  async updateContact(
    request: operations.UpdateContactRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateContactAcceptEnum;
    },
  ): Promise<operations.UpdateContactResponse> {
    return unwrapAsync(basicUpdateContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a contact
   *
   * @remarks
   * Create a single contact. Include a `properties` object to define [property values](https://developers.hubspot.com/docs/guides/api/crm/properties) for the contact, along with an `associations` array to define [associations](https://developers.hubspot.com/docs/guides/api/crm/associations/associations-v4) with other CRM records.
   */
  async createContact(
    request: components.SimplePublicObjectInputForCreate,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateContactAcceptEnum;
    },
  ): Promise<operations.CreateContactResponse> {
    return unwrapAsync(basicCreateContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Read
   *
   * @remarks
   * Read a Deal Object identified by `{dealId}`. `{dealId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.
   */
  async getDeal(
    request: operations.GetDealRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetDealAcceptEnum },
  ): Promise<operations.GetDealResponse> {
    return unwrapAsync(basicGetDeal(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Perform a partial update of an Object identified by `{dealId}`. `{dealId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
   */
  async updateDeal(
    request: operations.UpdateDealRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateDealAcceptEnum },
  ): Promise<operations.UpdateDealResponse> {
    return unwrapAsync(basicUpdateDeal(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
   */
  async createDeal(
    request: components.SimplePublicObjectInputForCreate,
    options?: RequestOptions & { acceptHeaderOverride?: CreateDealAcceptEnum },
  ): Promise<operations.CreateDealResponse> {
    return unwrapAsync(basicCreateDeal(
      this,
      request,
      options,
    ));
  }
}
