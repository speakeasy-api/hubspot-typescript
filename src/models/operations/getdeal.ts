/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDealRequest = {
  dealId: string;
  /**
   * A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  properties?: Array<string> | undefined;
  /**
   * A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  propertiesWithHistory?: Array<string> | undefined;
  /**
   * A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
   */
  associations?: Array<string> | undefined;
  /**
   * Whether to return only results that have been archived.
   */
  archived?: boolean | undefined;
  /**
   * The name of a property whose values are unique for this object type
   */
  idProperty?: string | undefined;
};

export type GetDealResponse =
  | components.SimplePublicObjectWithAssociations
  | Uint8Array
  | string;

/** @internal */
export const GetDealRequest$inboundSchema: z.ZodType<
  GetDealRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dealId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
  idProperty: z.string().optional(),
});

/** @internal */
export type GetDealRequest$Outbound = {
  dealId: string;
  properties?: Array<string> | undefined;
  propertiesWithHistory?: Array<string> | undefined;
  associations?: Array<string> | undefined;
  archived: boolean;
  idProperty?: string | undefined;
};

/** @internal */
export const GetDealRequest$outboundSchema: z.ZodType<
  GetDealRequest$Outbound,
  z.ZodTypeDef,
  GetDealRequest
> = z.object({
  dealId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
  idProperty: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDealRequest$ {
  /** @deprecated use `GetDealRequest$inboundSchema` instead. */
  export const inboundSchema = GetDealRequest$inboundSchema;
  /** @deprecated use `GetDealRequest$outboundSchema` instead. */
  export const outboundSchema = GetDealRequest$outboundSchema;
  /** @deprecated use `GetDealRequest$Outbound` instead. */
  export type Outbound = GetDealRequest$Outbound;
}

export function getDealRequestToJSON(getDealRequest: GetDealRequest): string {
  return JSON.stringify(GetDealRequest$outboundSchema.parse(getDealRequest));
}

export function getDealRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDealRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDealRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDealRequest' from JSON`,
  );
}

/** @internal */
export const GetDealResponse$inboundSchema: z.ZodType<
  GetDealResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.SimplePublicObjectWithAssociations$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type GetDealResponse$Outbound =
  | components.SimplePublicObjectWithAssociations$Outbound
  | Uint8Array;

/** @internal */
export const GetDealResponse$outboundSchema: z.ZodType<
  GetDealResponse$Outbound,
  z.ZodTypeDef,
  GetDealResponse
> = z.union([
  components.SimplePublicObjectWithAssociations$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDealResponse$ {
  /** @deprecated use `GetDealResponse$inboundSchema` instead. */
  export const inboundSchema = GetDealResponse$inboundSchema;
  /** @deprecated use `GetDealResponse$outboundSchema` instead. */
  export const outboundSchema = GetDealResponse$outboundSchema;
  /** @deprecated use `GetDealResponse$Outbound` instead. */
  export type Outbound = GetDealResponse$Outbound;
}

export function getDealResponseToJSON(
  getDealResponse: GetDealResponse,
): string {
  return JSON.stringify(GetDealResponse$outboundSchema.parse(getDealResponse));
}

export function getDealResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDealResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDealResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDealResponse' from JSON`,
  );
}
