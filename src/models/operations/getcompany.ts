/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCompanyRequest = {
  /**
   * The ID of the company
   */
  companyId: string;
  /**
   * A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  properties?: Array<string> | undefined;
  /**
   * A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  propertiesWithHistory?: Array<string> | undefined;
  /**
   * A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
   */
  associations?: Array<string> | undefined;
  /**
   * Whether to return only results that have been archived.
   */
  archived?: boolean | undefined;
  /**
   * The name of a property whose values are unique for this object
   */
  idProperty?: string | undefined;
};

export type GetCompanyResponse =
  | components.SimplePublicObjectWithAssociations
  | Uint8Array
  | string;

/** @internal */
export const GetCompanyRequest$inboundSchema: z.ZodType<
  GetCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
  idProperty: z.string().optional(),
});

/** @internal */
export type GetCompanyRequest$Outbound = {
  companyId: string;
  properties?: Array<string> | undefined;
  propertiesWithHistory?: Array<string> | undefined;
  associations?: Array<string> | undefined;
  archived: boolean;
  idProperty?: string | undefined;
};

/** @internal */
export const GetCompanyRequest$outboundSchema: z.ZodType<
  GetCompanyRequest$Outbound,
  z.ZodTypeDef,
  GetCompanyRequest
> = z.object({
  companyId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
  idProperty: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyRequest$ {
  /** @deprecated use `GetCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = GetCompanyRequest$inboundSchema;
  /** @deprecated use `GetCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = GetCompanyRequest$outboundSchema;
  /** @deprecated use `GetCompanyRequest$Outbound` instead. */
  export type Outbound = GetCompanyRequest$Outbound;
}

export function getCompanyRequestToJSON(
  getCompanyRequest: GetCompanyRequest,
): string {
  return JSON.stringify(
    GetCompanyRequest$outboundSchema.parse(getCompanyRequest),
  );
}

export function getCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyRequest' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponse$inboundSchema: z.ZodType<
  GetCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.SimplePublicObjectWithAssociations$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type GetCompanyResponse$Outbound =
  | components.SimplePublicObjectWithAssociations$Outbound
  | Uint8Array;

/** @internal */
export const GetCompanyResponse$outboundSchema: z.ZodType<
  GetCompanyResponse$Outbound,
  z.ZodTypeDef,
  GetCompanyResponse
> = z.union([
  components.SimplePublicObjectWithAssociations$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponse$ {
  /** @deprecated use `GetCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponse$inboundSchema;
  /** @deprecated use `GetCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponse$outboundSchema;
  /** @deprecated use `GetCompanyResponse$Outbound` instead. */
  export type Outbound = GetCompanyResponse$Outbound;
}

export function getCompanyResponseToJSON(
  getCompanyResponse: GetCompanyResponse,
): string {
  return JSON.stringify(
    GetCompanyResponse$outboundSchema.parse(getCompanyResponse),
  );
}

export function getCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponse' from JSON`,
  );
}
