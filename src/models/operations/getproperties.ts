/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the object for which to retrieve properties.
 */
export const ObjectType = {
  Contacts: "contacts",
  Companies: "companies",
  Deals: "deals",
} as const;
/**
 * The type of the object for which to retrieve properties.
 */
export type ObjectType = ClosedEnum<typeof ObjectType>;

export type GetPropertiesRequest = {
  /**
   * The type of the object for which to retrieve properties.
   */
  objectType: ObjectType;
};

export type GetPropertiesResponse = { [k: string]: any } | Uint8Array | string;

/** @internal */
export const ObjectType$inboundSchema: z.ZodNativeEnum<typeof ObjectType> = z
  .nativeEnum(ObjectType);

/** @internal */
export const ObjectType$outboundSchema: z.ZodNativeEnum<typeof ObjectType> =
  ObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectType$ {
  /** @deprecated use `ObjectType$inboundSchema` instead. */
  export const inboundSchema = ObjectType$inboundSchema;
  /** @deprecated use `ObjectType$outboundSchema` instead. */
  export const outboundSchema = ObjectType$outboundSchema;
}

/** @internal */
export const GetPropertiesRequest$inboundSchema: z.ZodType<
  GetPropertiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectType: ObjectType$inboundSchema,
});

/** @internal */
export type GetPropertiesRequest$Outbound = {
  objectType: string;
};

/** @internal */
export const GetPropertiesRequest$outboundSchema: z.ZodType<
  GetPropertiesRequest$Outbound,
  z.ZodTypeDef,
  GetPropertiesRequest
> = z.object({
  objectType: ObjectType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPropertiesRequest$ {
  /** @deprecated use `GetPropertiesRequest$inboundSchema` instead. */
  export const inboundSchema = GetPropertiesRequest$inboundSchema;
  /** @deprecated use `GetPropertiesRequest$outboundSchema` instead. */
  export const outboundSchema = GetPropertiesRequest$outboundSchema;
  /** @deprecated use `GetPropertiesRequest$Outbound` instead. */
  export type Outbound = GetPropertiesRequest$Outbound;
}

export function getPropertiesRequestToJSON(
  getPropertiesRequest: GetPropertiesRequest,
): string {
  return JSON.stringify(
    GetPropertiesRequest$outboundSchema.parse(getPropertiesRequest),
  );
}

export function getPropertiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPropertiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPropertiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPropertiesRequest' from JSON`,
  );
}

/** @internal */
export const GetPropertiesResponse$inboundSchema: z.ZodType<
  GetPropertiesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.record(z.any()), b64$.zodInbound]);

/** @internal */
export type GetPropertiesResponse$Outbound = { [k: string]: any } | Uint8Array;

/** @internal */
export const GetPropertiesResponse$outboundSchema: z.ZodType<
  GetPropertiesResponse$Outbound,
  z.ZodTypeDef,
  GetPropertiesResponse
> = z.union([z.record(z.any()), b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPropertiesResponse$ {
  /** @deprecated use `GetPropertiesResponse$inboundSchema` instead. */
  export const inboundSchema = GetPropertiesResponse$inboundSchema;
  /** @deprecated use `GetPropertiesResponse$outboundSchema` instead. */
  export const outboundSchema = GetPropertiesResponse$outboundSchema;
  /** @deprecated use `GetPropertiesResponse$Outbound` instead. */
  export type Outbound = GetPropertiesResponse$Outbound;
}

export function getPropertiesResponseToJSON(
  getPropertiesResponse: GetPropertiesResponse,
): string {
  return JSON.stringify(
    GetPropertiesResponse$outboundSchema.parse(getPropertiesResponse),
  );
}

export function getPropertiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPropertiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPropertiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPropertiesResponse' from JSON`,
  );
}
