/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetContactRequest = {
  /**
   * The ID of the contact to retrieve.
   */
  contactId: string;
  /**
   * A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  properties?: Array<string> | undefined;
  /**
   * A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.
   */
  propertiesWithHistory?: Array<string> | undefined;
  /**
   * A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
   */
  associations?: Array<string> | undefined;
  /**
   * Whether to return only results that have been archived.
   */
  archived?: boolean | undefined;
};

export type GetContactResponse =
  | components.SimplePublicObjectWithAssociations
  | Uint8Array
  | string;

/** @internal */
export const GetContactRequest$inboundSchema: z.ZodType<
  GetContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
});

/** @internal */
export type GetContactRequest$Outbound = {
  contactId: string;
  properties?: Array<string> | undefined;
  propertiesWithHistory?: Array<string> | undefined;
  associations?: Array<string> | undefined;
  archived: boolean;
};

/** @internal */
export const GetContactRequest$outboundSchema: z.ZodType<
  GetContactRequest$Outbound,
  z.ZodTypeDef,
  GetContactRequest
> = z.object({
  contactId: z.string(),
  properties: z.array(z.string()).optional(),
  propertiesWithHistory: z.array(z.string()).optional(),
  associations: z.array(z.string()).optional(),
  archived: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactRequest$ {
  /** @deprecated use `GetContactRequest$inboundSchema` instead. */
  export const inboundSchema = GetContactRequest$inboundSchema;
  /** @deprecated use `GetContactRequest$outboundSchema` instead. */
  export const outboundSchema = GetContactRequest$outboundSchema;
  /** @deprecated use `GetContactRequest$Outbound` instead. */
  export type Outbound = GetContactRequest$Outbound;
}

export function getContactRequestToJSON(
  getContactRequest: GetContactRequest,
): string {
  return JSON.stringify(
    GetContactRequest$outboundSchema.parse(getContactRequest),
  );
}

export function getContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactRequest' from JSON`,
  );
}

/** @internal */
export const GetContactResponse$inboundSchema: z.ZodType<
  GetContactResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.SimplePublicObjectWithAssociations$inboundSchema,
  b64$.zodInbound,
]);

/** @internal */
export type GetContactResponse$Outbound =
  | components.SimplePublicObjectWithAssociations$Outbound
  | Uint8Array;

/** @internal */
export const GetContactResponse$outboundSchema: z.ZodType<
  GetContactResponse$Outbound,
  z.ZodTypeDef,
  GetContactResponse
> = z.union([
  components.SimplePublicObjectWithAssociations$outboundSchema,
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponse$ {
  /** @deprecated use `GetContactResponse$inboundSchema` instead. */
  export const inboundSchema = GetContactResponse$inboundSchema;
  /** @deprecated use `GetContactResponse$outboundSchema` instead. */
  export const outboundSchema = GetContactResponse$outboundSchema;
  /** @deprecated use `GetContactResponse$Outbound` instead. */
  export type Outbound = GetContactResponse$Outbound;
}

export function getContactResponseToJSON(
  getContactResponse: GetContactResponse,
): string {
  return JSON.stringify(
    GetContactResponse$outboundSchema.parse(getContactResponse),
  );
}

export function getContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponse' from JSON`,
  );
}
