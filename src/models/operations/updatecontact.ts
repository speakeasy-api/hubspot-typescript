/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateContactRequest = {
  /**
   * The ID of the contact to update.
   */
  contactId: string;
  simplePublicObjectInput: components.SimplePublicObjectInput;
};

export type UpdateContactResponse =
  | components.SimplePublicObject
  | Uint8Array
  | string;

/** @internal */
export const UpdateContactRequest$inboundSchema: z.ZodType<
  UpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactId: z.string(),
  SimplePublicObjectInput: components.SimplePublicObjectInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SimplePublicObjectInput": "simplePublicObjectInput",
  });
});

/** @internal */
export type UpdateContactRequest$Outbound = {
  contactId: string;
  SimplePublicObjectInput: components.SimplePublicObjectInput$Outbound;
};

/** @internal */
export const UpdateContactRequest$outboundSchema: z.ZodType<
  UpdateContactRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactRequest
> = z.object({
  contactId: z.string(),
  simplePublicObjectInput: components.SimplePublicObjectInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    simplePublicObjectInput: "SimplePublicObjectInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequest$ {
  /** @deprecated use `UpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequest$inboundSchema;
  /** @deprecated use `UpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequest$outboundSchema;
  /** @deprecated use `UpdateContactRequest$Outbound` instead. */
  export type Outbound = UpdateContactRequest$Outbound;
}

export function updateContactRequestToJSON(
  updateContactRequest: UpdateContactRequest,
): string {
  return JSON.stringify(
    UpdateContactRequest$outboundSchema.parse(updateContactRequest),
  );
}

export function updateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequest' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponse$inboundSchema: z.ZodType<
  UpdateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.SimplePublicObject$inboundSchema, b64$.zodInbound]);

/** @internal */
export type UpdateContactResponse$Outbound =
  | components.SimplePublicObject$Outbound
  | Uint8Array;

/** @internal */
export const UpdateContactResponse$outboundSchema: z.ZodType<
  UpdateContactResponse$Outbound,
  z.ZodTypeDef,
  UpdateContactResponse
> = z.union([components.SimplePublicObject$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponse$ {
  /** @deprecated use `UpdateContactResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponse$inboundSchema;
  /** @deprecated use `UpdateContactResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponse$outboundSchema;
  /** @deprecated use `UpdateContactResponse$Outbound` instead. */
  export type Outbound = UpdateContactResponse$Outbound;
}

export function updateContactResponseToJSON(
  updateContactResponse: UpdateContactResponse,
): string {
  return JSON.stringify(
    UpdateContactResponse$outboundSchema.parse(updateContactResponse),
  );
}

export function updateContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponse' from JSON`,
  );
}
