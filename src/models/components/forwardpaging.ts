/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NextPage,
  NextPage$inboundSchema,
  NextPage$Outbound,
  NextPage$outboundSchema,
} from "./nextpage.js";

export type ForwardPaging = {
  next?: NextPage | undefined;
};

/** @internal */
export const ForwardPaging$inboundSchema: z.ZodType<
  ForwardPaging,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: NextPage$inboundSchema.optional(),
});

/** @internal */
export type ForwardPaging$Outbound = {
  next?: NextPage$Outbound | undefined;
};

/** @internal */
export const ForwardPaging$outboundSchema: z.ZodType<
  ForwardPaging$Outbound,
  z.ZodTypeDef,
  ForwardPaging
> = z.object({
  next: NextPage$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForwardPaging$ {
  /** @deprecated use `ForwardPaging$inboundSchema` instead. */
  export const inboundSchema = ForwardPaging$inboundSchema;
  /** @deprecated use `ForwardPaging$outboundSchema` instead. */
  export const outboundSchema = ForwardPaging$outboundSchema;
  /** @deprecated use `ForwardPaging$Outbound` instead. */
  export type Outbound = ForwardPaging$Outbound;
}

export function forwardPagingToJSON(forwardPaging: ForwardPaging): string {
  return JSON.stringify(ForwardPaging$outboundSchema.parse(forwardPaging));
}

export function forwardPagingFromJSON(
  jsonString: string,
): SafeParseResult<ForwardPaging, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForwardPaging$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForwardPaging' from JSON`,
  );
}
