/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AssociationCategory = {
  HubspotDefined: "HUBSPOT_DEFINED",
  UserDefined: "USER_DEFINED",
  IntegratorDefined: "INTEGRATOR_DEFINED",
} as const;
export type AssociationCategory = ClosedEnum<typeof AssociationCategory>;

export type AssociationSpec = {
  associationCategory: AssociationCategory;
  associationTypeId: number;
};

/** @internal */
export const AssociationCategory$inboundSchema: z.ZodNativeEnum<
  typeof AssociationCategory
> = z.nativeEnum(AssociationCategory);

/** @internal */
export const AssociationCategory$outboundSchema: z.ZodNativeEnum<
  typeof AssociationCategory
> = AssociationCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssociationCategory$ {
  /** @deprecated use `AssociationCategory$inboundSchema` instead. */
  export const inboundSchema = AssociationCategory$inboundSchema;
  /** @deprecated use `AssociationCategory$outboundSchema` instead. */
  export const outboundSchema = AssociationCategory$outboundSchema;
}

/** @internal */
export const AssociationSpec$inboundSchema: z.ZodType<
  AssociationSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  associationCategory: AssociationCategory$inboundSchema,
  associationTypeId: z.number().int(),
});

/** @internal */
export type AssociationSpec$Outbound = {
  associationCategory: string;
  associationTypeId: number;
};

/** @internal */
export const AssociationSpec$outboundSchema: z.ZodType<
  AssociationSpec$Outbound,
  z.ZodTypeDef,
  AssociationSpec
> = z.object({
  associationCategory: AssociationCategory$outboundSchema,
  associationTypeId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssociationSpec$ {
  /** @deprecated use `AssociationSpec$inboundSchema` instead. */
  export const inboundSchema = AssociationSpec$inboundSchema;
  /** @deprecated use `AssociationSpec$outboundSchema` instead. */
  export const outboundSchema = AssociationSpec$outboundSchema;
  /** @deprecated use `AssociationSpec$Outbound` instead. */
  export type Outbound = AssociationSpec$Outbound;
}

export function associationSpecToJSON(
  associationSpec: AssociationSpec,
): string {
  return JSON.stringify(AssociationSpec$outboundSchema.parse(associationSpec));
}

export function associationSpecFromJSON(
  jsonString: string,
): SafeParseResult<AssociationSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssociationSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssociationSpec' from JSON`,
  );
}
