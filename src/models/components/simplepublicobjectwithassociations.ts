/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CollectionResponseAssociatedId,
  CollectionResponseAssociatedId$inboundSchema,
  CollectionResponseAssociatedId$Outbound,
  CollectionResponseAssociatedId$outboundSchema,
} from "./collectionresponseassociatedid.js";
import {
  ValueWithTimestamp,
  ValueWithTimestamp$inboundSchema,
  ValueWithTimestamp$Outbound,
  ValueWithTimestamp$outboundSchema,
} from "./valuewithtimestamp.js";

export type SimplePublicObjectWithAssociations = {
  associations?: { [k: string]: CollectionResponseAssociatedId } | undefined;
  createdAt: Date;
  archived?: boolean | undefined;
  archivedAt?: Date | undefined;
  propertiesWithHistory?:
    | { [k: string]: Array<ValueWithTimestamp> }
    | undefined;
  id: string;
  properties: { [k: string]: string | null };
  updatedAt: Date;
};

/** @internal */
export const SimplePublicObjectWithAssociations$inboundSchema: z.ZodType<
  SimplePublicObjectWithAssociations,
  z.ZodTypeDef,
  unknown
> = z.object({
  associations: z.record(CollectionResponseAssociatedId$inboundSchema)
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  archived: z.boolean().optional(),
  archivedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  propertiesWithHistory: z.record(z.array(ValueWithTimestamp$inboundSchema))
    .optional(),
  id: z.string(),
  properties: z.record(z.nullable(z.string())),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type SimplePublicObjectWithAssociations$Outbound = {
  associations?:
    | { [k: string]: CollectionResponseAssociatedId$Outbound }
    | undefined;
  createdAt: string;
  archived?: boolean | undefined;
  archivedAt?: string | undefined;
  propertiesWithHistory?:
    | { [k: string]: Array<ValueWithTimestamp$Outbound> }
    | undefined;
  id: string;
  properties: { [k: string]: string | null };
  updatedAt: string;
};

/** @internal */
export const SimplePublicObjectWithAssociations$outboundSchema: z.ZodType<
  SimplePublicObjectWithAssociations$Outbound,
  z.ZodTypeDef,
  SimplePublicObjectWithAssociations
> = z.object({
  associations: z.record(CollectionResponseAssociatedId$outboundSchema)
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  archived: z.boolean().optional(),
  archivedAt: z.date().transform(v => v.toISOString()).optional(),
  propertiesWithHistory: z.record(z.array(ValueWithTimestamp$outboundSchema))
    .optional(),
  id: z.string(),
  properties: z.record(z.nullable(z.string())),
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimplePublicObjectWithAssociations$ {
  /** @deprecated use `SimplePublicObjectWithAssociations$inboundSchema` instead. */
  export const inboundSchema = SimplePublicObjectWithAssociations$inboundSchema;
  /** @deprecated use `SimplePublicObjectWithAssociations$outboundSchema` instead. */
  export const outboundSchema =
    SimplePublicObjectWithAssociations$outboundSchema;
  /** @deprecated use `SimplePublicObjectWithAssociations$Outbound` instead. */
  export type Outbound = SimplePublicObjectWithAssociations$Outbound;
}

export function simplePublicObjectWithAssociationsToJSON(
  simplePublicObjectWithAssociations: SimplePublicObjectWithAssociations,
): string {
  return JSON.stringify(
    SimplePublicObjectWithAssociations$outboundSchema.parse(
      simplePublicObjectWithAssociations,
    ),
  );
}

export function simplePublicObjectWithAssociationsFromJSON(
  jsonString: string,
): SafeParseResult<SimplePublicObjectWithAssociations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SimplePublicObjectWithAssociations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SimplePublicObjectWithAssociations' from JSON`,
  );
}
