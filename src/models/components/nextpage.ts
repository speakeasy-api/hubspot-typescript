/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NextPage = {
  link?: string | undefined;
  after: string;
};

/** @internal */
export const NextPage$inboundSchema: z.ZodType<
  NextPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  link: z.string().optional(),
  after: z.string(),
});

/** @internal */
export type NextPage$Outbound = {
  link?: string | undefined;
  after: string;
};

/** @internal */
export const NextPage$outboundSchema: z.ZodType<
  NextPage$Outbound,
  z.ZodTypeDef,
  NextPage
> = z.object({
  link: z.string().optional(),
  after: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextPage$ {
  /** @deprecated use `NextPage$inboundSchema` instead. */
  export const inboundSchema = NextPage$inboundSchema;
  /** @deprecated use `NextPage$outboundSchema` instead. */
  export const outboundSchema = NextPage$outboundSchema;
  /** @deprecated use `NextPage$Outbound` instead. */
  export type Outbound = NextPage$Outbound;
}

export function nextPageToJSON(nextPage: NextPage): string {
  return JSON.stringify(NextPage$outboundSchema.parse(nextPage));
}

export function nextPageFromJSON(
  jsonString: string,
): SafeParseResult<NextPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NextPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NextPage' from JSON`,
  );
}
