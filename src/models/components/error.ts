/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ErrorDetail,
  ErrorDetail$inboundSchema,
  ErrorDetail$Outbound,
  ErrorDetail$outboundSchema,
} from "./errordetail.js";

/**
 * An error occurred.
 */
export type ErrorT = {
  /**
   * A specific category that contains more specific detail about the error
   */
  subCategory?: string | undefined;
  /**
   * Context about the error condition
   */
  context?: { [k: string]: Array<string> } | undefined;
  /**
   * A unique identifier for the request. Include this value with any error reports or support tickets
   */
  correlationId: string;
  /**
   * A map of link names to associated URIs containing documentation about the error or recommended remediation steps
   */
  links?: { [k: string]: string } | undefined;
  /**
   * A human readable message describing the error along with remediation steps where appropriate
   */
  message: string;
  /**
   * The error category
   */
  category: string;
  /**
   * further information about the error
   */
  errors?: Array<ErrorDetail> | undefined;
};

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    subCategory: z.string().optional(),
    context: z.record(z.array(z.string())).optional(),
    correlationId: z.string(),
    links: z.record(z.string()).optional(),
    message: z.string(),
    category: z.string(),
    errors: z.array(ErrorDetail$inboundSchema).optional(),
  });

/** @internal */
export type ErrorT$Outbound = {
  subCategory?: string | undefined;
  context?: { [k: string]: Array<string> } | undefined;
  correlationId: string;
  links?: { [k: string]: string } | undefined;
  message: string;
  category: string;
  errors?: Array<ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  subCategory: z.string().optional(),
  context: z.record(z.array(z.string())).optional(),
  correlationId: z.string(),
  links: z.record(z.string()).optional(),
  message: z.string(),
  category: z.string(),
  errors: z.array(ErrorDetail$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}
