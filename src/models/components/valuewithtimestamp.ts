/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValueWithTimestamp = {
  sourceId?: string | undefined;
  sourceType: string;
  sourceLabel?: string | undefined;
  updatedByUserId?: number | undefined;
  value: string;
  timestamp: Date;
};

/** @internal */
export const ValueWithTimestamp$inboundSchema: z.ZodType<
  ValueWithTimestamp,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceId: z.string().optional(),
  sourceType: z.string(),
  sourceLabel: z.string().optional(),
  updatedByUserId: z.number().int().optional(),
  value: z.string(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ValueWithTimestamp$Outbound = {
  sourceId?: string | undefined;
  sourceType: string;
  sourceLabel?: string | undefined;
  updatedByUserId?: number | undefined;
  value: string;
  timestamp: string;
};

/** @internal */
export const ValueWithTimestamp$outboundSchema: z.ZodType<
  ValueWithTimestamp$Outbound,
  z.ZodTypeDef,
  ValueWithTimestamp
> = z.object({
  sourceId: z.string().optional(),
  sourceType: z.string(),
  sourceLabel: z.string().optional(),
  updatedByUserId: z.number().int().optional(),
  value: z.string(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueWithTimestamp$ {
  /** @deprecated use `ValueWithTimestamp$inboundSchema` instead. */
  export const inboundSchema = ValueWithTimestamp$inboundSchema;
  /** @deprecated use `ValueWithTimestamp$outboundSchema` instead. */
  export const outboundSchema = ValueWithTimestamp$outboundSchema;
  /** @deprecated use `ValueWithTimestamp$Outbound` instead. */
  export type Outbound = ValueWithTimestamp$Outbound;
}

export function valueWithTimestampToJSON(
  valueWithTimestamp: ValueWithTimestamp,
): string {
  return JSON.stringify(
    ValueWithTimestamp$outboundSchema.parse(valueWithTimestamp),
  );
}

export function valueWithTimestampFromJSON(
  jsonString: string,
): SafeParseResult<ValueWithTimestamp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueWithTimestamp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueWithTimestamp' from JSON`,
  );
}
