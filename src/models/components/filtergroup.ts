/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Filter,
  Filter$inboundSchema,
  Filter$Outbound,
  Filter$outboundSchema,
} from "./filter.js";

export type FilterGroup = {
  filters: Array<Filter>;
};

/** @internal */
export const FilterGroup$inboundSchema: z.ZodType<
  FilterGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: z.array(Filter$inboundSchema),
});

/** @internal */
export type FilterGroup$Outbound = {
  filters: Array<Filter$Outbound>;
};

/** @internal */
export const FilterGroup$outboundSchema: z.ZodType<
  FilterGroup$Outbound,
  z.ZodTypeDef,
  FilterGroup
> = z.object({
  filters: z.array(Filter$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterGroup$ {
  /** @deprecated use `FilterGroup$inboundSchema` instead. */
  export const inboundSchema = FilterGroup$inboundSchema;
  /** @deprecated use `FilterGroup$outboundSchema` instead. */
  export const outboundSchema = FilterGroup$outboundSchema;
  /** @deprecated use `FilterGroup$Outbound` instead. */
  export type Outbound = FilterGroup$Outbound;
}

export function filterGroupToJSON(filterGroup: FilterGroup): string {
  return JSON.stringify(FilterGroup$outboundSchema.parse(filterGroup));
}

export function filterGroupFromJSON(
  jsonString: string,
): SafeParseResult<FilterGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterGroup' from JSON`,
  );
}
