/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * null
 */
export const Operator = {
  Eq: "EQ",
  Neq: "NEQ",
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
  Between: "BETWEEN",
  In: "IN",
  NotIn: "NOT_IN",
  HasProperty: "HAS_PROPERTY",
  NotHasProperty: "NOT_HAS_PROPERTY",
  ContainsToken: "CONTAINS_TOKEN",
  NotContainsToken: "NOT_CONTAINS_TOKEN",
} as const;
/**
 * null
 */
export type Operator = ClosedEnum<typeof Operator>;

export type Filter = {
  highValue?: string | undefined;
  propertyName: string;
  values?: Array<string> | undefined;
  value?: string | undefined;
  /**
   * null
   */
  operator: Operator;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    highValue: z.string().optional(),
    propertyName: z.string(),
    values: z.array(z.string()).optional(),
    value: z.string().optional(),
    operator: Operator$inboundSchema,
  });

/** @internal */
export type Filter$Outbound = {
  highValue?: string | undefined;
  propertyName: string;
  values?: Array<string> | undefined;
  value?: string | undefined;
  operator: string;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  highValue: z.string().optional(),
  propertyName: z.string(),
  values: z.array(z.string()).optional(),
  value: z.string().optional(),
  operator: Operator$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}
