/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssociationSpec,
  AssociationSpec$inboundSchema,
  AssociationSpec$Outbound,
  AssociationSpec$outboundSchema,
} from "./associationspec.js";
import {
  PublicObjectId,
  PublicObjectId$inboundSchema,
  PublicObjectId$Outbound,
  PublicObjectId$outboundSchema,
} from "./publicobjectid.js";

export type PublicAssociationsForObject = {
  types: Array<AssociationSpec>;
  to: PublicObjectId;
};

/** @internal */
export const PublicAssociationsForObject$inboundSchema: z.ZodType<
  PublicAssociationsForObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  types: z.array(AssociationSpec$inboundSchema),
  to: PublicObjectId$inboundSchema,
});

/** @internal */
export type PublicAssociationsForObject$Outbound = {
  types: Array<AssociationSpec$Outbound>;
  to: PublicObjectId$Outbound;
};

/** @internal */
export const PublicAssociationsForObject$outboundSchema: z.ZodType<
  PublicAssociationsForObject$Outbound,
  z.ZodTypeDef,
  PublicAssociationsForObject
> = z.object({
  types: z.array(AssociationSpec$outboundSchema),
  to: PublicObjectId$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicAssociationsForObject$ {
  /** @deprecated use `PublicAssociationsForObject$inboundSchema` instead. */
  export const inboundSchema = PublicAssociationsForObject$inboundSchema;
  /** @deprecated use `PublicAssociationsForObject$outboundSchema` instead. */
  export const outboundSchema = PublicAssociationsForObject$outboundSchema;
  /** @deprecated use `PublicAssociationsForObject$Outbound` instead. */
  export type Outbound = PublicAssociationsForObject$Outbound;
}

export function publicAssociationsForObjectToJSON(
  publicAssociationsForObject: PublicAssociationsForObject,
): string {
  return JSON.stringify(
    PublicAssociationsForObject$outboundSchema.parse(
      publicAssociationsForObject,
    ),
  );
}

export function publicAssociationsForObjectFromJSON(
  jsonString: string,
): SafeParseResult<PublicAssociationsForObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicAssociationsForObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicAssociationsForObject' from JSON`,
  );
}
